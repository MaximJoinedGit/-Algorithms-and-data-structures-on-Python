# 1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами
# на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
# Примечания:
# a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
# b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
# Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.

from random import randint


def bubble_sort(array: list):
    """
    Улучшенная функция сортировки методом пузырька.
    """
    # Убрал лишние переменные и заменил while на for.
    for i in range(len(array) - 1):
        for elem in range(len(array) - i - 1):
            if array[elem] > array[elem + 1]:
                array[elem], array[elem + 1] = array[elem + 1], array[elem]


if __name__ == '__main__':
    n = 10
    # Проверка на корректную работу. Проверяется 1000 случаев.
    for _ in range(1000):
        arr = [randint(-100, 99) for _ in range(n)]
        # print(arr)
        bubble_sort(arr)
        assert arr == sorted(arr), print(arr)
    arr = [randint(-100, 99) for _ in range(n)]
    print(f'Исходный массив: {arr}')
    print(f'Отсортированный массив: {bubble_sort(arr)}')
